<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1112.0850                               -->
<workbook original-version='18.1' source-build='2024.3.1 (20243.24.1112.0850)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' inline='true' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='GDP by Country per Year_data' name='excel-direct.1k6dt7h13367qa11765iy1wqiy89'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/attar/Desktop/5th sem/dv lab/GDP by Country per Year_data.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1k6dt7h13367qa11765iy1wqiy89' name='GDP by Country per Year_data Table2' table='[GDP by Country per Year_data$Table2]' type='table'>
          <columns gridOrigin='A1:V230:no:A1:AC230:0' header='yes' outcome='2'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='real' name='2000' ordinal='1' />
            <column datatype='real' name='2001' ordinal='2' />
            <column datatype='real' name='2002' ordinal='3' />
            <column datatype='real' name='2003' ordinal='4' />
            <column datatype='real' name='2004' ordinal='5' />
            <column datatype='real' name='2005' ordinal='6' />
            <column datatype='real' name='2006' ordinal='7' />
            <column datatype='real' name='2007' ordinal='8' />
            <column datatype='real' name='2008' ordinal='9' />
            <column datatype='real' name='2009' ordinal='10' />
            <column datatype='real' name='2010' ordinal='11' />
            <column datatype='real' name='2011' ordinal='12' />
            <column datatype='real' name='2012' ordinal='13' />
            <column datatype='real' name='2013' ordinal='14' />
            <column datatype='real' name='2014' ordinal='15' />
            <column datatype='real' name='2015' ordinal='16' />
            <column datatype='real' name='2016' ordinal='17' />
            <column datatype='real' name='2017' ordinal='18' />
            <column datatype='real' name='2018' ordinal='19' />
            <column datatype='real' name='2019' ordinal='20' />
            <column datatype='real' name='2020' ordinal='21' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:V230:no:A1:AC230:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2000</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2000]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2000</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2001</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2001]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2001</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2002</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2002]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2002</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2003</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2003]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2003</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2004</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2004]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2004</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2005</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2005]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2005</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2006</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2006]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2006</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2007</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2007]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2007</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2008</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2008]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2008</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2009</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2009]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2009</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2010</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2010]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2010</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2011</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2011]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2011</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2012</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2012]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2012</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2013</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2013]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2013</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2014</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2014]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2014</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2017</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2017]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2017</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2018</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2018]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2018</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2019</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2019]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2019</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2020</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2020]</local-name>
            <parent-name>[GDP by Country per Year_data Table2]</parent-name>
            <remote-alias>2020</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[2004]' role='measure' type='quantitative' />
      <column datatype='real' name='[2005]' role='measure' type='quantitative' />
      <column datatype='real' name='[2006]' role='measure' type='quantitative' />
      <column datatype='real' name='[2007]' role='measure' type='quantitative' />
      <column datatype='real' name='[2008]' role='measure' type='quantitative' />
      <column datatype='real' name='[2009]' role='measure' type='quantitative' />
      <column datatype='real' name='[2010]' role='measure' type='quantitative' />
      <column datatype='real' name='[2011]' role='measure' type='quantitative' />
      <column datatype='real' name='[2012]' role='measure' type='quantitative' />
      <column datatype='real' name='[2013]' role='measure' type='quantitative' />
      <column datatype='real' name='[2014]' role='measure' type='quantitative' />
      <column datatype='real' name='[2015]' role='measure' type='quantitative' />
      <column datatype='real' name='[2016]' role='measure' type='quantitative' />
      <column datatype='real' name='[2017]' role='measure' type='quantitative' />
      <column datatype='real' name='[2018]' role='measure' type='quantitative' />
      <column datatype='real' name='[2019]' role='measure' type='quantitative' />
      <column datatype='real' name='[2020]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='GDP by Country per Year_data Table2' datatype='table' name='[__tableau_internal_object_id__].[GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2017]' derivation='Sum' name='[sum:2017:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2018]' derivation='Sum' name='[sum:2018:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2019]' derivation='Sum' name='[sum:2019:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2020]' derivation='Sum' name='[sum:2020:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2014:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2006:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2010:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2018:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2015:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2011:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2007:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2012:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2019:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2020:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2005:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2016:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2013:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2004:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2008:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2017:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2009:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Congo, Republic of&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Advanced economies&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central America&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eastern Europe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Macao SAR&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Taiwan Province of China&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China, People&apos;s Republic of&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Emerging and Developing Asia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Western Hemisphere (Region)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Asia and Pacific&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Euro area&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Latin America and the Caribbean&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Micronesia, Fed. States of&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;North Africa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Sudan, Republic of&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Emerging and Developing Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Caribbean&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Central Asia and the Caucasus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Emerging market and developing economies&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Middle East (Region)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australia and New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Middle East and Central Asia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Other advanced economies&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sub-Saharan Africa (Region)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;East Asia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Southeast Asia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo, Dem. Rep. of the&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Korea, Republic of&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Africa (Region)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Major advanced economies (G7)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pacific Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;São Tomé and Príncipe&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ASEAN-5&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Country&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hong Kong SAR&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lao P.D.R.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Western Europe&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='GDP by Country per Year_data Table2' id='GDP by Country per Year!data$Table2_1E599A6CBEB04F3BA0C0865E3C37CCD4'>
            <properties context=''>
              <relation connection='excel-direct.1k6dt7h13367qa11765iy1wqiy89' name='GDP by Country per Year_data Table2' table='[GDP by Country per Year_data$Table2]' type='table'>
                <columns gridOrigin='A1:V230:no:A1:AC230:0' header='yes' outcome='2'>
                  <column datatype='string' name='Country' ordinal='0' />
                  <column datatype='real' name='2000' ordinal='1' />
                  <column datatype='real' name='2001' ordinal='2' />
                  <column datatype='real' name='2002' ordinal='3' />
                  <column datatype='real' name='2003' ordinal='4' />
                  <column datatype='real' name='2004' ordinal='5' />
                  <column datatype='real' name='2005' ordinal='6' />
                  <column datatype='real' name='2006' ordinal='7' />
                  <column datatype='real' name='2007' ordinal='8' />
                  <column datatype='real' name='2008' ordinal='9' />
                  <column datatype='real' name='2009' ordinal='10' />
                  <column datatype='real' name='2010' ordinal='11' />
                  <column datatype='real' name='2011' ordinal='12' />
                  <column datatype='real' name='2012' ordinal='13' />
                  <column datatype='real' name='2013' ordinal='14' />
                  <column datatype='real' name='2014' ordinal='15' />
                  <column datatype='real' name='2015' ordinal='16' />
                  <column datatype='real' name='2016' ordinal='17' />
                  <column datatype='real' name='2017' ordinal='18' />
                  <column datatype='real' name='2018' ordinal='19' />
                  <column datatype='real' name='2019' ordinal='20' />
                  <column datatype='real' name='2020' ordinal='21' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0fq6t0309abkx11ge3l1r15l1kb9'>
            <column datatype='real' name='[2004]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Longitude (generated)]' field-type='quantitative' max='14962689.895189319' min='-34655601.907867469' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Latitude (generated)]' field-type='quantitative' max='16605324.829600153' min='-11905504.41692582' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' />
              <lod column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2004:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Latitude (generated)]</rows>
        <cols>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{56DDB6FB-D5FE-4F01-9BA9-1397B49D0D7A}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' />
          </datasources>
          <datasource-dependencies datasource='federated.0fq6t0309abkx11ge3l1r15l1kb9'>
            <column datatype='real' name='[2006]' role='measure' type='quantitative' />
            <column datatype='real' name='[2007]' role='measure' type='quantitative' />
            <column datatype='real' name='[2008]' role='measure' type='quantitative' />
            <column datatype='real' name='[2009]' role='measure' type='quantitative' />
            <column datatype='real' name='[2010]' role='measure' type='quantitative' />
            <column datatype='real' name='[2011]' role='measure' type='quantitative' />
            <column datatype='real' name='[2012]' role='measure' type='quantitative' />
            <column datatype='real' name='[2013]' role='measure' type='quantitative' />
            <column datatype='real' name='[2014]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017]' role='measure' type='quantitative' />
            <column datatype='real' name='[2018]' role='measure' type='quantitative' />
            <column datatype='real' name='[2019]' role='measure' type='quantitative' />
            <column datatype='real' name='[2020]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2007]' derivation='Sum' name='[sum:2007:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2008]' derivation='Sum' name='[sum:2008:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2009]' derivation='Sum' name='[sum:2009:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2011]' derivation='Sum' name='[sum:2011:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2012]' derivation='Sum' name='[sum:2012:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2013]' derivation='Sum' name='[sum:2013:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2014]' derivation='Sum' name='[sum:2014:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017]' derivation='Sum' name='[sum:2017:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2018]' derivation='Sum' name='[sum:2018:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2019]' derivation='Sum' name='[sum:2019:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2020]' derivation='Sum' name='[sum:2020:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2006:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2007:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2008:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2009:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2010:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2011:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2012:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2013:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2014:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2015:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2016:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2017:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2018:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2019:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2020:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]'>
            <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</column>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Multiple Values]</rows>
        <cols>([federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk] / [federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{523B4EE5-BE8E-4D1C-8F2A-060DE8B2FE2B}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' />
          </datasources>
          <datasource-dependencies datasource='federated.0fq6t0309abkx11ge3l1r15l1kb9'>
            <column datatype='real' name='[2010]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2010]' derivation='Sum' name='[sum:2010:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]'>
            <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2010:qk]&quot;' user:op='manual' />
          </filter>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Asia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</column>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' />
              <wedge-size column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2010:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9230387210845947' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B467A0E8-B1EB-448E-BDEF-639E2DEE941A}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' />
          </datasources>
          <datasource-dependencies datasource='federated.0fq6t0309abkx11ge3l1r15l1kb9'>
            <column datatype='real' name='[2016]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017]' role='measure' type='quantitative' />
            <column datatype='real' name='[2018]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017]' derivation='Sum' name='[sum:2017:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2018]' derivation='Sum' name='[sum:2018:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2016:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2017:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2018:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</column>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Multiple Values]</rows>
        <cols>([federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk] / [federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{A2F0425B-5D07-4E5F-B63D-B0F99B2A418A}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP by Country per Year_data!Table2 (GDP by Country per Year_data)' name='federated.0fq6t0309abkx11ge3l1r15l1kb9' />
          </datasources>
          <datasource-dependencies datasource='federated.0fq6t0309abkx11ge3l1r15l1kb9'>
            <column datatype='real' name='[2004]' role='measure' type='quantitative' />
            <column datatype='real' name='[2005]' role='measure' type='quantitative' />
            <column datatype='real' name='[2006]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2004]' derivation='Sum' name='[sum:2004:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2005]' derivation='Sum' name='[sum:2005:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2006]' derivation='Sum' name='[sum:2006:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2004:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2005:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fq6t0309abkx11ge3l1r15l1kb9].[sum:2006:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</column>
            <column>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[Multiple Values]</rows>
        <cols>([federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk] / [federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{1818D712-E20D-4301-9241-9B484D5ABC83}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='5' type-v2='layout-basic' w='82400' x='800' y='1000'>
              <zone h='49000' id='3' name='Sheet 1' w='82400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='Sheet 3' w='82400' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='98000' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' type-v2='color' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='19' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='18' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Sheet 1' w='82400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='98000' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' type-v2='color' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Sheet 3' w='82400' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{06B6D31C-939E-49EF-92F2-5D036EBA5A1E}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='5' type-v2='layout-basic' w='82400' x='800' y='1000'>
              <zone h='98000' id='9' name='Sheet 2' w='82400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='41125' id='10' name='Sheet 2' pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' type-v2='color' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='20' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='19' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='9' is-fixed='true' name='Sheet 2' w='82400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='41125' id='10' name='Sheet 2' pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' type-v2='color' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{731A26DF-EDAD-4763-BCAB-A0FF7B283033}' />
    </dashboard>
    <dashboard name='Story 1' type='storyboard'>
      <style />
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98340' id='1' param='vert' removable='false' type-v2='layout-flow' w='98426' x='787' y='830'>
            <zone h='4149' id='3' type-v2='title' w='98426' x='787' y='830' />
            <zone h='10477' id='4' is-fixed='true' paired-zone-id='5' removable='false' type-v2='flipboard-nav' w='98426' x='787' y='4979' />
            <zone h='83714' id='5' paired-zone-id='4' removable='false' type-v2='flipboard' w='98426' x='787' y='15456'>
              <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point captured-sheet='Dashboard 1' id='1' />
                  <story-point captured-sheet='Dashboard 2' id='2' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{2A03CEC1-3728-479E-81AF-E7524F5E1CC0}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.19792' source-height='33'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='157'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='157'>
            <card pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{38C4EA8B-88E3-468F-84AF-590244255A63}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='157'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='157'>
            <card pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</field>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{32478998-5D4D-45A7-A5B5-6CEF757AFA89}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='157'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='157'>
            <card pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</field>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8FD4376C-E59C-4E59-B4FE-62A1E504F275}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='158'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='158'>
            <card pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</field>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B46A153C-5638-43CA-9D85-74E5C8FD23C1}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='158'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='158'>
            <card pane-specification-id='0' param='[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</field>
            <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DC63AEE5-64BA-461B-819A-D8BFD42D3AC9}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[none:Country:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 3' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{4DF41C14-04D2-454B-AE72-3A441941BE3B}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Sheet 2'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0fq6t0309abkx11ge3l1r15l1kb9].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{55B6F25D-1690-4922-9D3C-A9C61B1CD5FC}' />
    </window>
    <window class='dashboard' maximized='true' name='Story 1'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{43F4730E-432C-4DFE-899E-C80C12FE6553}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      mLtzC5F9+vp/Bnfnf4+uMUQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      q8cAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='164' name='Sheet 3' width='164'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      ZPLGlFZfAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
